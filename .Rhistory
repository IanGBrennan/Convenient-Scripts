shift.edges <- l1ou.object[[k]]$shift.configuration
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
names
numbers <- rep(t, length(names))
numbers
sub.regimes <- append(sub.regimes, names)
sub.regimes
regime.numbers <- append(regime.numbers, numbers)
regime.numbers
base.regime <- setdiff(trees[[k]]$tip.label, names)
base.regime
trees[[k]]$tip.label
names
regime.numbers
#base.regime <- setdiff(trees[[k]]$tip.label, names)
#sub.regimes <- append(sub.regimes, base.regime)
#base.numbers <- rep(0, length(base.regime))
regime.numbers <- append(regime.numbers, base.numbers)
regime.numbers
regime.numbers <- append(regime.numbers, numbers)
#base.regime <- setdiff(trees[[k]]$tip.label, names)
#sub.regimes <- append(sub.regimes, base.regime)
#base.numbers <- rep(0, length(base.regime))
#regime.numbers <- append(regime.numbers, base.numbers)
names(regime.numbers) <- sub.regimes
regime.numbers
sub.regimes <- NULL
regime.numbers <- NULL
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
numbers <- rep(t, length(names))
sub.regimes <- append(sub.regimes, names)
regime.numbers <- append(regime.numbers, numbers)
#base.regime <- setdiff(trees[[k]]$tip.label, names)
#sub.regimes <- append(sub.regimes, base.regime)
#base.numbers <- rep(0, length(base.regime))
#regime.numbers <- append(regime.numbers, base.numbers)
names(regime.numbers) <- sub.regimes
regime.numbers
t=2
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
numbers <- rep(t, length(names))
sub.regimes <- append(sub.regimes, names)
regime.numbers <- append(regime.numbers, numbers)
#base.regime <- setdiff(trees[[k]]$tip.label, names)
#sub.regimes <- append(sub.regimes, base.regime)
#base.numbers <- rep(0, length(base.regime))
#regime.numbers <- append(regime.numbers, base.numbers)
names(regime.numbers) <- sub.regimes
regime.numbers
t=3
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
numbers <- rep(t, length(names))
sub.regimes <- append(sub.regimes, names)
regime.numbers <- append(regime.numbers, numbers)
#base.regime <- setdiff(trees[[k]]$tip.label, names)
#sub.regimes <- append(sub.regimes, base.regime)
#base.numbers <- rep(0, length(base.regime))
#regime.numbers <- append(regime.numbers, base.numbers)
names(regime.numbers) <- sub.regimes
t=4
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
numbers <- rep(t, length(names))
sub.regimes <- append(sub.regimes, names)
regime.numbers <- append(regime.numbers, numbers)
#base.regime <- setdiff(trees[[k]]$tip.label, names)
#sub.regimes <- append(sub.regimes, base.regime)
#base.numbers <- rep(0, length(base.regime))
#regime.numbers <- append(regime.numbers, base.numbers)
names(regime.numbers) <- sub.regimes
t=5
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
numbers <- rep(t, length(names))
sub.regimes <- append(sub.regimes, names)
regime.numbers <- append(regime.numbers, numbers)
#base.regime <- setdiff(trees[[k]]$tip.label, names)
#sub.regimes <- append(sub.regimes, base.regime)
#base.numbers <- rep(0, length(base.regime))
#regime.numbers <- append(regime.numbers, base.numbers)
names(regime.numbers) <- sub.regimes
regime.numbers
base.regime <- setdiff(trees[[k]]$tip.label, names(regime.numbers))
base.regime
#sub.regimes <- append(sub.regimes, base.regime)
base.numbers <- rep(0, length(base.regime))
base.numbers
names(base.numbers) <- base.regime
base.numbers
regime.numbers
regime.numbers <- append(regime.numbers, base.numbers)
setdiff(trees[[1]]$tip.label, names(regime.numbers))
get.l1ou.regimes <- function(l1ou.object){
all.regimes <- NULL
for (k in 1:length(l1ou.object)){
sub.regimes <- NULL
regime.numbers <- NULL
# have to pull the shift positions (edges)
shift.edges <- l1ou.object[[k]]$shift.configuration
if (length(shift.edges) == 0) {
cat(paste("no shifts in tree", k))
} else for (t in 1:length(shift.edges)) {
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
numbers <- rep(t, length(names))
sub.regimes <- append(sub.regimes, names)
regime.numbers <- append(regime.numbers, numbers)
names(regime.numbers) <- sub.regimes
}
base.regime <- setdiff(trees[[k]]$tip.label, names(regime.numbers))
#sub.regimes <- append(sub.regimes, base.regime)
base.numbers <- rep(0, length(base.regime))
names(base.numbers) <- base.regime
regime.numbers <- append(regime.numbers, base.numbers)
all.regimes[[k]] <- regime.numbers
}
return(all.regimes)
}
testo <- get.l1ou.regimes(empl1ou)
testo[[1]]
lapply(testo, length)
testo[[8]]
testo[[9]]
duplicated(names(testo[[9]]))
lapply(testo, length)
Ntip(trees[[1]])
Ntip(trees[[9]])
testo[[9]]
plot(testo[[9]])
plot(empl1ou[[9]])
testo[[9]][1:3]
testo[[9]][unique(names(testo[[9]]))]
regime.numbers
get.l1ou.regimes <- function(l1ou.object){
all.regimes <- NULL
for (k in 1:length(l1ou.object)){
sub.regimes <- NULL
regime.numbers <- NULL
# have to pull the shift positions (edges)
shift.edges <- l1ou.object[[k]]$shift.configuration
if (length(shift.edges) == 0) {
cat(paste("no shifts in tree", k))
} else for (t in 1:length(shift.edges)) {
names <- getDescendants.edges(l1ou.object[[k]]$tree, shift.edges[[t]])
numbers <- rep(t, length(names))
sub.regimes <- append(sub.regimes, names)
regime.numbers <- append(regime.numbers, numbers)
names(regime.numbers) <- sub.regimes
}
base.regime <- setdiff(trees[[k]]$tip.label, names(regime.numbers))
#sub.regimes <- append(sub.regimes, base.regime)
base.numbers <- rep(0, length(base.regime))
names(base.numbers) <- base.regime
regime.numbers <- append(regime.numbers, base.numbers)
regime.numbers <- regime.numbers[unique(names(regime.numbers))]
all.regimes[[k]] <- regime.numbers
}
return(all.regimes)
}
testo <- get.l1ou.regimes(empl1ou)
lapply(testo, length)
empl1ou <- emp2
emp2
length(emp2)
testo <- get.l1ou.regimes(empl1ou)
length(testo)
lapply(testo, length)
empRegimes <- get.l1ou.regimes(empl1ou)
empRegimes[[1]]
empRegimes[[2]]
empRegimes[[3]]
make.simmap(trees[[1]], empRegimes[[1]], model="ER", nsim=1)
testo <- make.simmap(trees[[1]], empRegimes[[1]], model="ER", nsim=1)
plot(testo)
# create a simmap tree for each l1ou scenario
empSIMMAP <- mclapply(1:length(trees), function(x){
make.simmap(trees[[x]], empRegimes[[x]], model="ER", nsim=1)
})
plot(empSIMMAP[[2]])
plot(empSIMMAP[[3]])
plot(empSIMMAP[[4]])
mvSIM(trees[[1]], nsim=1, model="OUM")
mvSIM(empSIMMAP[[1]], nsim=1, model="OUM")
mvSIM(empSIMMAP[[1]], nsim=1, model="OUM", traits=5)
mvSIM(empSIMMAP[[1]], nsim=1, model="OUM", param=list(sigma=empl1ou[[1]]$sigma2, alpha=empl1ou[[1]]$alpha, ntraits=5))
empl1ou[[1]]$sigma2
mvSIM(empSIMMAP[[1]], nsim=1, model="OUM", param=list(sigma=empl1ou[[1]]$sigma2, alpha=empl1ou[[1]]$alpha, ntraits=5, theta=c(0,0,0,0,0)))
matrix(c(2,0.5,0.5,1),2)
empSIMMAP[[1]]
empSIMMAP[[1]]$Q
rowsum(empSIMMAP[[1]]$Q)
rowsum(empSIMMAP[[1]]$Q[1,])
rowSums(empSIMMAP[[1]]$Q)
diag(empSIMMAP[[1]]$Q)
matrix(c(2,0.5,0.5,1),2)
matrix(c(0.1,0.05,0.05,0.1),2)
diag(empSIMMAP[[1]]$Q)
empl1ou[[1]]$alpha
empAlpha <- lapply(1:length(trees), function(x){
diag(empSIMMAP[[x]]$Q) <- empl1ou[[x]]$alpha
})
empl1ou[[1]]$alpha
diag(empSIMMAP[[1]]$Q)
empl1ou[[1]]
matrix(c(2,0.5,0.5,1),2)
empAlpha <- lapply(1:length(trees), function(x){
diag(empSIMMAP[[x]]$Q) <- c(0,empl1ou[[x]]$alpha)
})
c(0, empl1ou[[1]]$alpha)
empSIMMAP[[1]]$Q
diag(empSIMMAP[[1]]$Q)
test <- empSIMMAP[[1]]
diag(test)
diag(test$Q)
diag(test$Q) <- c(0,empl1ou[[1]]$alpha)
diag(test$Q)
empSIMMAP[[1]]$Q
empAlpha <- lapply(1:length(trees), function(x){
diag(empSIMMAP[[x]]$Q) <- c(0,empl1ou[[x]]$alpha)
})
1:length(trees)
lapply(1:length(trees), function(x){
diag(empSIMMAP[[x]]$Q) <- c(0,empl1ou[[x]]$alpha)
})
diag(empSIMMAP[[x]]$Q) <- c(0, empl1ou[[x]]$alpha)
diag(empSIMMAP[[1]]$Q) <- c(0, empl1ou[[1]]$alpha)
empSIMMAP[[1]]$Q
empSIMMAP[1]$Q
empAlpha <- lapply(1:length(trees), function(x){
diag(empSIMMAP[x]$Q) <- c(0,empl1ou[x]$alpha)
})
empAlpha <- lapply(1:length(trees), function(x){
diag(empSIMMAP[[x]]$Q) <- c(0, empl1ou[[x]]$alpha)
})
for(p in 1:length(trees)){diag(empSIMMAP[[p]]$Q) <- c(0, empl1ou[[p]]$alpha)}
p=1
c(0, empl1ou[[p]]$alpha)
diag(empSIMMAP[[p]]$Q)
for(p in 1:length(trees)){(diag(empSIMMAP[[p]]$Q)) <- c(0, empl1ou[[p]]$alpha)}
for(p in 1:length(trees)){diag(empSIMMAP[[p]]$Q) <- c(0, empl1ou[[p]]$alpha)}
lapply(1:length(empSIMMAP), function(x){
length(diag(empSIMMAP[[x]]$Q))
})
empSIMMAP[[9]]$Q
empl1ou[[9]]$alpha
mvSIM(empSIMMAP[[1]], nsim=1, model="OUM", param=list(ntraits=5))
mvOU(empSIMMAP, emptraits, model="OUM")
mvOU(empSIMMAP[[1]], emptraits, model="OUM")
mvOU(empSIMMAP[[1]], emptraits[1:5], model="OUM")
# fit the mvOU model to empirical data
empOUM <- mvOU(empSIMMAP[[1]], emptraits[1:5], model="OUM")
empl1ou[[1]]$alpha
# now simulate the data!
siml1ou <- mclapply(1:length(trees), function(x){
mvSIM(trees[[x]], nsim=1, model="OUM", param=empOUM)}, mc.cores=8)
empOUM
mvSIM(trees[[1]], nsim=1, model="OUM", param=empOUM)
mvSIM(empSIMMAP[[1]], nsim=1, model="OUM", param=empOUM)
mvSIM(empSIMMAP[[9]], nsim=1, model="OUM", param=empOUM)
saveRDS(empSIMMAP, "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/SIMMAPtrees_multivariatel1ou.RDS")
# fit the multivariate multioptima OUM model with mvMORPH
# this helps to simulate data in the following step
empOUM <- mclapply(1:10, function(x){
mvOU(empSIMMAP[[x]], emptraits[1:5], model="OUM")})
# fit the multivariate multioptima OUM model with mvMORPH
# this helps to simulate data in the following step
empOUM <- mclapply(1:10, function(x){
mvOU(empSIMMAP[[x]], emptraits[1:5], model="OUM")}, mc.cores=8)
length(empOUM)
empOUM2 <- c(empOUM, empOUM, empOUM, empOUM, empOUM, empOUM, empOUM, empOUM, empOUM, empOUM)
length(empOUM2)
saveRDS(empOUM2, "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/EMPIRICAL_FIT_multivariateOUM.RDS")
empOUM <- empOUM2
# now simulate the data!
siml1ou <- mclapply(1:length(trees), function(x){
mvSIM(trees[[x]], nsim=1, model="OUM", param=empOUM[[x]])}, mc.cores=8)
# now simulate the data!
siml1ou <- mclapply(1:length(trees), function(x){
mvSIM(empSIMMAP[[x]], nsim=1, model="OUM", param=empOUM[[x]])}, mc.cores=8)
siml1ou[[1]]
saveRDS(siml1ou, "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/SIMULATED_DATA_multivariatel1ou.RDS")
simBM[[1]]
sim.traits <- simBM # simBM, simOU, simEB, simOUM are the options
sim.traits[[1]]
sim.traits[1]
# Fit the Brownian Motion model to SIMULATED data
##################################################
BM.list <- mclapply(1:length(trees), function(x){
mvBM(trees[[x]], sim.traits[[x]], model="BM1")}, mc.cores=8)
BM.list[[1]]
# Fit the Brownian Motion model to SIMULATED data
##################################################
EB.list <- mclapply(1:length(trees), function(x){
mvEB(trees[[x]], sim.traits[[x]])}, mc.cores=8)
EB.list[[1]]$AICc
BM.list[[1]]$AICc
sim.traits[[1]]
# Fit the multioptima l1OU model to SIMULATED data
##################################################
# adjust the data and tree to fit (order matters in l1ou!)
l1ou.traits <- NULL
for(i in 1:100) {l1ou.traits[[i]] <- adjust_data(trees[[i]], sim.traits[[i]])}
estimate_shift_configuration(l1ou.traits[[1]]$tree, l1ou.traits[[1]]$Y, nCores=8, quietly=F, criterion="pBIC")
testo <- estimate_shift_configuration(l1ou.traits[[1]]$tree, l1ou.traits[[1]]$Y, nCores=8, quietly=F, criterion="pBIC")
testo$logLik
sum(testo$logLik)
testo$score
testo <- estimate_shift_configuration(l1ou.traits[[1]]$tree, l1ou.traits[[1]]$Y, nCores=8, quietly=F, criterion="AICc")
testo$score
testo
plot(testo)
get_shift_configuration(testo, 3)
get_shift_configuration(model=testo, nShifts=3)
class(testo)
get_shift_configuration()
get_shift_configuration
testBM <- mvBM(trees[[1]], siml1ou[[1]], model="BM1")
testEB <- mvEB(trees[[1]], siml1ou[[1]])
test.traits <- adjust_data(trees[[1]], siml1ou[[1]])
testl1ou <- estimate_shift_configuration(test.traits$tree, test.traits$Y, nCores=8, quietly=F, criterion="AICc")
testBM$AICc; testEB$AICc; testl1ou$score
testl1ou <- estimate_shift_configuration(test.traits$tree, test.traits$Y, nCores=8, quietly=F, criterion="pBIC")
testl1ou$score
plot(testl1ou)
siml1ou[[1]]
empOUM[[1]]
empl1ou[[1]]
testo <- empOUM[[1]]
testo$alpha
diag(testo$alpha) <- empl1ou[[1]]$alpha
testo$alpha
testo <- lapply(1:length(empOUM2), function(x){
diag(empOUM2[[x]]$alpha) <- empl1ou[[x]]$alpha
})
testo[[1]]$alpha
testo
empOUM2[[1]]
for(p in 1:length(empOUM2)) {diag(empOUM2[[p]]$alpha <- empl1ou[[p]]$alpha)}
empOUM2[[1]]$alpha
empOUM2 <- empOUM
length(empOUM)
for(p in 1:length(empOUM2)) {diag(empOUM2[[p]]$alpha) <- empl1ou[[p]]$alpha}
empOUM2[[1]]$alpha
empOUM2[[11]]$alpha
empOUM2[[10]]$alpha
# now simulate the data!
siml1ou <- mclapply(1:length(trees), function(x){
mvSIM(empSIMMAP[[x]], nsim=1, model="OUM", param=empOUM2[[x]])}, mc.cores=8)
testBM <- mvBM(trees[[1]], siml1ou[[1]], model="BM1")
testEB <- mvEB(trees[[1]], siml1ou[[1]])
test.traits <- adjust_data(trees[[1]], siml1ou[[1]])
testl1ou <- estimate_shift_configuration(test.traits$tree, test.traits$Y, nCores=8, quietly=F, criterion="AICc")
testl1ou$score
plot(testl1ou)
empl1ou[[1]]$shift.configuration
getDescendants.edges(trees[[1]], 8)
getDescendants.edges(trees[[1]], 24)
getDescendants.edges(trees[[1]], 47)
getDescendants.edges(trees[[1]], 5)
getDescendants.edges(trees[[1]], 17)
saveRDS(siml1ou, "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/SIMULATED_DATA_multivariatel1ou.RDS")
testBM <- mvBM(trees[[1]], simOU[[1]], model="BM1")
testEB <- mvEB(trees[[1]], simOU[[1]])
test.traits <- adjust_data(trees[[1]], simOU[[1]])
testl1ou <- estimate_shift_configuration(test.traits$tree, test.traits$Y, nCores=8, quietly=F, criterion="AICc")
plot(testl1ou)
testBM$AICc; testEB$AICc; testl1ou$score
testOU <- mvOU(trees[[1]], simOU[[1]], model="OU1")
testBM$AICc; testEB$AICc; testl1ou$score; testOU$AICc
head(BM.list)
length(BM.list)
# Fit the multioptima l1OU model to SIMULATED data
##################################################
# adjust the data and tree to fit (order matters in l1ou!)
l1ou.traits <- NULL
sim.model <- "BM"
BM.res <- NULL; for(y in 1:length(BM.list)){
BMtemp <- data.frame(simulated_model=sim.model, fit_model="BM", AICc=BM.list[[y]]$AICc, tree=y)}
BM.res
BM.res <- NULL; for(y in 1:length(BM.list)){
BMtemp <- data.frame(simulated_model=sim.model, fit_model="BM", AICc=BM.list[[y]]$AICc, tree=y)
BM.res <- rbind(BM.res, BMtemp)}
BM.res
EB.res <- NULL; for(y in 1:length(EB.list)){
EBtemp <- data.frame(simulated_model=sim.model, fit_model="EB", AICc=EB.list[[y]]$AICc, tree=y)
EB.res <- rbind(EB.res, EBtemp)}
EB.res
# Fit the multioptima l1OU model to SIMULATED data
##################################################
# adjust the data and tree to fit (order matters in l1ou!)
l1ou.traits <- NULL
for(i in 1:100) {l1ou.traits[[i]] <- adjust_data(trees[[i]], sim.traits[[i]])}
# fit em
l1ou.list <- NULL
for(t in 1:100) {l1ou.list[[t]] <- estimate_shift_configuration(l1ou.traits[[t]]$tree, l1ou.traits[[t]]$Y, nCores=8, quietly=F, criterion="pBIC")}
#saveRDS(empl1ou, "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/EMPIRICAL_FIT_multivariatel1ou.RDS")
l1ou.res <- NULL; for(y in 1:length(l1ou.list)){
l1outemp <- data.frame(simulated_model=sim.model, fit_model="l1ou", AICc=l1ou.list[[y]]$AICc, tree=y)
l1ou.res <- rbind(l1ou.res, l1outemp)}
l1ou.list[[1]]
l1ou.list[[1]]$score
#saveRDS(empl1ou, "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/EMPIRICAL_FIT_multivariatel1ou.RDS")
l1ou.res <- NULL; for(y in 1:length(l1ou.list)){
l1outemp <- data.frame(simulated_model=sim.model, fit_model="l1ou", AICc=l1ou.list[[y]]$score, tree=y)
l1ou.res <- rbind(l1ou.res, l1outemp)}
l1ou.res
all.model.fits <- list(BM = BM.list, EB = EB.list, l1ou = l1ou.list)
all.model.fits[[1]]
all.model.fits[[BM]][[1]]
all.model.fits[[1]][[1]]
all.model.fits[[2]][[1]]
all.model.fits[[3]][[1]]
save.path
save.path <- "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/"
group.name
save.all.liks <- paste0(save.path, sim.model, "_Simulated_ModelFit.csv")
save.all.liks
model.fit <- NULL
all.aicc <- NULL
all.aicc <- rbind(all.aicc, BM.res)
all.aicc
all.aicc <- rbind(all.aicc, EB.res)
all.aicc <- rbind(all.aicc, l1ou.res)
nrow(all.aicc)
# Fit the OU model to SIMULATED data
##################################################
OU.list <- mclapply(1:length(trees), function(x){
mvOU(trees[[x]], sim.traits[[x]], model="OU1")}, mc.cores=8)
OU.list
OU.res <- NULL; for(y in 1:length(OU.list)){
OUtemp <- data.frame(simulated_model=sim.model, fit_model="OU", AICc=OU.list[[y]]$AICc, tree=y)
OU.res <- rbind(OU.res, OUtemp)}
length(OU.list)
lapply(OU.list, length)
OU.list[[98]]
for(i in 1:length(OU.list)){
if(length(OU.list[[i]]) < 10){
OU.list[[i]]$AICc <- NA
}
warnings()
OU.list[[98]]
OU.res <- NULL; for(y in 1:length(OU.list)){
OUtemp <- data.frame(simulated_model=sim.model, fit_model="OU", AICc=OU.list[[y]]$AICc, tree=y)
OU.res <- rbind(OU.res, OUtemp)}
OU.res
model.fit["OU"] <- OU.list
length(model.fit)
model.fit <- NULL
all.aicc <- NULL
model.fit["BM"] <- BM.list
all.aicc <- rbind(all.aicc, BM.res)
model.fit <- list()
all.aicc <- NULL
model.fit["BM"] <- BM.list
model.fit[["BM"]] <- BM.list
all.aicc <- rbind(all.aicc, BM.res)
model.fit[["EB"]] <- EB.list
all.aicc <- rbind(all.aicc, EB.res)
model.fit[["l1ou"]] <- l1ou.list
all.aicc <- rbind(all.aicc, l1ou.res)
model.fit[["OU"]] <- OU.list
all.aicc <- rbind(all.aicc, OU.res)
head(all.aicc)
subset(all.aicc, all.aicc$tree==1)
subset(all.aicc, all.aicc$tree==5)
subset(all.aicc, all.aicc$tree==78)
# Make sure to save all the results and model fits
##################################################
save.all.liks <- paste0(save.path, sim.model, "_Simulated_ModelFit.csv")
save.all.liks
write.csv(all.model.fits, file=save.all.liks, row.names=F)
write.csv(all.aicc, file=save.all.liks, row.names=F)
save.all.models <- paste0(save.path, sim.model, "_Simulated_ModelObjects.RDS")
save.all.models
saveRDS(model.fit, file = save.all.models)
sim.traits <- simEB # simBM, simOU, simEB, simOUM are the options
sim.model <- "EB"
save.path <- "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/"
model.fit <- NULL
all.aicc <- NULL
# Fit the Brownian Motion model to SIMULATED data
##################################################
BM.list <- mclapply(1:length(trees), function(x){
mvBM(trees[[x]], sim.traits[[x]], model="BM1")}, mc.cores=8)
BM.res <- NULL; for(y in 1:length(BM.list)){
BMtemp <- data.frame(simulated_model=sim.model, fit_model="BM", AICc=BM.list[[y]]$AICc, tree=y)
BM.res <- rbind(BM.res, BMtemp)}
model.fit[["BM"]] <- BM.list
all.aicc <- rbind(all.aicc, BM.res)
# Fit the Early Burst model to SIMULATED data
##################################################
EB.list <- mclapply(1:length(trees), function(x){
mvEB(trees[[x]], sim.traits[[x]])}, mc.cores=8)
EB.res <- NULL; for(y in 1:length(EB.list)){
EBtemp <- data.frame(simulated_model=sim.model, fit_model="EB", AICc=EB.list[[y]]$AICc, tree=y)
EB.res <- rbind(EB.res, EBtemp)}
model.fit[["EB"]] <- EB.list
all.aicc <- rbind(all.aicc, EB.res)
filter(all.aicc, all.aicc$tree == 5)
BM.res
EB.res
all.aicc <- NULL
all.aicc <- rbind(all.aicc, BM.res)
all.aicc <- rbind(all.aicc, EB.res)
all.aicc
filter(all.aicc, all.aicc$tree == 5)
subset(all.aicc, all.aicc$tree == 5)
subset(all.aicc, all.aicc$tree == 10)
empEB[[1]]
empEB[[1]]$beta
sample(0, 1, 100, replace=T)
sample(100, 1, 100, replace=T)
sample(0:1, 100, replace=T)
empOU
saveRDS(empEB, "/Users/Ian/Documents/ANU_Finished/T223_Pythonidae/EMPIRICAL_FIT_multivariateEB.RDS")
