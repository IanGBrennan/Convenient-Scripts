plot(treelist[[1]])
treelist <- NULL
for (z in 1:10) {
intree <- base.tree[[z]]
alt.sim.fossil.trees(phy=intree, time.frame=c(10,max(nodeHeights(base.tree)),0.1),
die=c(0.1,5,0.1), num.taxa=(length(intree$tip.label))*.25, num.trees=1) # output is called 'output.trees'
treelist[[z]] <- output.trees
}
treelist
class(treelist) <- "multiPhylo"
plot(treelist)
plot(treelist, show.tip.label=F)
treelist <- NULL
for (z in 1:10) {
intree <- base.tree[[z]]
sim.tree <- alt.sim.fossil.trees(phy=intree, time.frame=c(10,max(nodeHeights(base.tree)),0.1),
die=c(0.1,5,0.1), num.taxa=(length(intree$tip.label))*.25, num.trees=1) # output is called 'output.trees'
treelist[[z]] <- sim.tree
}
class(treelist) <- "multiPhylo"
treelist
treelist[[1]]
plot(treelist, show.tip.label=F)
intree
plot(intree)
treelist <- NULL
for (z in 1:10) {
intree <- base.tree[[z]]
sim.tree <- alt.sim.fossil.trees(phy=intree, time.frame=c(10,max(nodeHeights(intree)),0.1),
die=c(0.1,5,0.1), num.taxa=(length(intree$tip.label))*.25, num.trees=1) # output is called 'output.trees'
treelist[[z]] <- sim.tree
}
treelist
class(treelist) <- "multiPhylo"
plot(treelist, show.tip.label=F)
test <- skink[[1]]
test <- alt.bind.at.depth(test, "XXX", 4, 0.1, 5)
test <- skink
test <- alt.bind.at.depth(test, "XXX", 4, 0.1, 5)
plot(test)
treelist
plot(treelist[[1]], show.tip.label=F)
input.trees <- treelist
diff.alpha <- seq(from=0.5, to=10, by=0.1) # or set it as a vector of sampled values
diff.alpha <- sample(diff.alpha, size=100, replace=T) # or set it as a vector of sampled values
preshift.sigma  = 1
postshift.sigma = 5
sim.shifts <- seq(from=1, to=20, by=1)
sim.shifts <- sample(sim.shifts, size=100, replace=T)
sim.traits.geiger <- list(); sim.traits.ouwie <- list() # make trait lists for all trees in geiger and ouwie data format
save.sim.traits <- NULL
extant.data <- list()
num.sims <- 1 # designate the number of simulated data sets you like to create per tree
stree.res <- NULL
bm.pars <- 0.1 # set the diffusion parameter of the BM process
for (z in 1:1) {
traits.geiger <- list(); traits.ouwie <- list() # make intermediate trait lists for each tree in geiger and ouwie data format
phy <- input.trees[[z]] # designating the target tree
traitz <- list(); #traitz.ouwie <- list(); traitz.geiger <- list() # make intermediary data lists
#traitz.geiger <- NULL; traitz.ouwie <- NULL
cat("iteration", z, "of", length(input.trees), "\n") #keep track of what tree/loop# we're on
for (i in 1:num.sims) {
simulated.traits <- NULL
#simulated.traits <- as.data.frame(sim.character(phy, model="bm", bm.pars))
simulated.traits <- as.data.frame(sim.character(phy, model="ou", ou.pars))
traits.geiger[[i]] <- simulated.traits
}
sim.traits.geiger[[z]] <- traits.geiger
#sim.traits.ouwie[[z]] <- traits.ouwie
save.sim.traits[[z]] <- as.data.frame(sim.traits.geiger[[z]]);
save.sim.traits[[z]][,"tree.num"] <- z
save.sim.traits[[z]][,"gen.model"] <- "OU"
#save(save.sim.traits, file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Simulated.Traits.Miocene.OU.RData")
for (i in 1:num.sims) {
tree <- input.trees[[z]] # change this to match the tree size you want
data <- sim.traits.geiger[[z]][[i]] # change this to match the proper sized tree
#data.ouwie <- sim.traits.ouwie[[z]][[i]] # change this to match the proper sized tree
bmfit    <- fitContinuous_paleo(tree, data, model="BM")
ebfit    <- fitContinuous(tree, data, SE=NA, model="EB")
oufit    <- fitContinuous(tree, data, SE=NA, model="OU", bounds=list(alpha=c((log(2)/max(nodeHeights(tree))), 10)))
TRCfit   <- fitContinuous_paleo(tree, data, model="TRC", shift.time=11)
SRCfit   <- fitContinuous_paleo(tree, data, model="SRC", shift.time=11, bounds=list(alpha=c((log(2)/max(nodeHeights(tree))), 10)))
#OUMfit  <- OUwie.slice(tree, data.ouwie, model=c("OUM"),  root.station=T, timeslices=c(10))
#OUMAfit <- OUwie.slice(tree, data.ouwie, model=c("OUMA"), root.station=T, timeslices=c(10))
#OUMVfit <- OUwie.slice(tree, data.ouwie, model=c("OUMV"), root.station=T, timeslices=c(10))
#####################################################
###### Summarize and Compare Model Fitting ##########
#####################################################
results.names <- list(ebfit$opt, oufit$opt)
results <- NULL
for (k in 1:length(results.names)) {
x <- as.data.frame(results.names[k])
results <- rbind(results, as.data.frame(t(c(x$lnL, x$aic, x$aicc))))
}
results.nonstan <- NULL
results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(bmfit$Trait1$lnl, bmfit$Trait1$aic, bmfit$Trait1$aicc))))
results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(TRCfit$Trait1$lnl, TRCfit$Trait1$aic, TRCfit$Trait1$aicc))))
results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(SRCfit$Trait1$lnl, SRCfit$Trait1$aic, SRCfit$Trait1$aicc))))
#results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(OUMfit$loglik, OUMfit$AIC, OUMfit$AICc))))
#results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(OUMAfit$loglik, OUMAfit$AIC, OUMAfit$AICc))))
#results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(OUMVfit$loglik, OUMVfit$AIC, OUMVfit$AICc))))
## combine both
results <- rbind.data.frame(results, results.nonstan)
model <- c("EB", "OU", "BM", "TRC", "SRC") #, "OUM", "OUMA", "OUMV")
tree.type <- paste("fossil tree")
results[,"tree.type"] <- tree.type; results[,"tree.num"] <- z
colnames(results) <- c("lnL", "AIC", "AICc", "tree.type", "tree.num")
results <- cbind(results, model)
## Use AIC weights to determine best fitting model and model contributions
weight <- aicw(results$AICc)
results <- cbind(results, weight$delta)
results <- cbind(results, weight$w)
stree.res <- rbind.data.frame(stree.res, results)
}
drops <- is.extinct(phy, tol=0.0001) # find out which tips are extinct
extant.sim.tree <- drop.extinct(phy, tol=0.00001)
extant.data[[z]] <- subset(sim.traits.geiger[[z]][[i]], !rownames(sim.traits.geiger[[z]][[i]]) %in% drops)
for (i in 1:num.sims) {
tree <- extant.sim.tree # change this to match the tree size you want
data <- extant.data[[z]] # change this to match the proper sized tree
#data.ouwie <- sim.traits.ouwie[[z]][[i]] # change this to match the proper sized tree
bmfit    <- fitContinuous_paleo(tree, data, model="BM")
ebfit    <- fitContinuous(tree, data, SE=NA, model="EB")
oufit    <- fitContinuous(tree, data, SE=NA, model="OU", bounds=list(alpha=c((log(2)/max(nodeHeights(tree))), 10)))
TRCfit   <- fitContinuous_paleo(tree, data, model="TRC", shift.time=10)
SRCfit   <- fitContinuous_paleo(tree, data, model="SRC", shift.time=10, bounds=list(alpha=c((log(2)/max(nodeHeights(tree))), 10)))
#OUMfit  <- OUwie.slice(tree, data.ouwie, model=c("OUM"),  root.station=T, timeslices=c(10))
#OUMAfit <- OUwie.slice(tree, data.ouwie, model=c("OUMA"), root.station=T, timeslices=c(10))
#OUMVfit <- OUwie.slice(tree, data.ouwie, model=c("OUMV"), root.station=T, timeslices=c(10))
#####################################################
###### Summarize and Compare Model Fitting ##########
#####################################################
results.names <- list(ebfit$opt, oufit$opt)
results <- NULL
for (k in 1:length(results.names)) {
x <- as.data.frame(results.names[k])
results <- rbind(results, as.data.frame(t(c(x$lnL, x$aic, x$aicc))))
}
results.nonstan <- NULL
results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(bmfit$Trait1$lnl, bmfit$Trait1$aic, bmfit$Trait1$aicc))))
results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(TRCfit$Trait1$lnl, TRCfit$Trait1$aic, TRCfit$Trait1$aicc))))
results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(SRCfit$Trait1$lnl, SRCfit$Trait1$aic, SRCfit$Trait1$aicc))))
#results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(OUMfit$loglik, OUMfit$AIC, OUMfit$AICc))))
#results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(OUMAfit$loglik, OUMAfit$AIC, OUMAfit$AICc))))
#results.nonstan <- rbind(results.nonstan, as.data.frame(t(c(OUMVfit$loglik, OUMVfit$AIC, OUMVfit$AICc))))
## combine both
results <- rbind.data.frame(results, results.nonstan)
model <- c("EB", "OU","BM", "TRC", "SRC") #, "OUM", "OUMA", "OUMV")
tree.type <- paste("extant tree")
results[,"tree.type"] <- tree.type; results[,"tree.num"] <- z
colnames(results) <- c("lnL", "AIC", "AICc", "tree.type", "tree.num")
results <- cbind(results, model)
## Use AIC weights to determine best fitting model and model contributions
weight <- aicw(results$AICc)
results <- cbind(results, weight$delta)
results <- cbind(results, weight$w)
stree.res <- rbind.data.frame(stree.res, results)
}
}
test <- treelist[[1]]
test
test$edge.length[test$edge.length<0]<-0.1
test$edge.length<0
test$edge.length
treelist
test
class(test) <- "phylo"
test
treelist[[1]]$edge.length
skink$edge.length
class(treelist)
class(treelist[[1]])
test <- treelist
class(test[[1]])<- "phylo"
test[[1]]
class(treelist[[2]])
treelist[[2]]
source("/Users/Ian/Google.Drive/R.Analyses/Convenient Scripts/Sim.Fossil.Trees.SOURCE.R")
s
reelist <- NULL
for (z in 1:2) {
intree <- base.tree[[z]]
sim.tree <- alt.sim.fossil.trees(phy=intree, time.frame=c(10,max(nodeHeights(intree)),0.1),
die=c(0.1,5,0.1), num.taxa=(length(intree$tip.label))*.25, num.trees=1) # output is called 'output.trees'
reelist[[z]] <- sim.tree
}
plot(reelist[[1]])
class(reelist[[1]])
reelist
reelist[[1]][[1]]
treelist[[1]][[1]]
test <- treelist[[1]][[1]]
test
test$edge.length
test$edge.length[test$edge.length<0]<-0.1
plot(treelist[[1]][[1]], show.tip.label=F)
plot(test, show.tip.label=F)
source("/Users/Ian/Google.Drive/R.Analyses/Convenient Scripts/Sim.Fossil.Trees.SOURCE.R")
reelist <- NULL
for (z in 1:2) {
intree <- base.tree[[z]]
sim.tree <- alt.sim.fossil.trees(phy=intree, time.frame=c(10,max(nodeHeights(intree)),0.1),
die=c(0.1,5,0.1), num.taxa=(length(intree$tip.label))*.25, num.trees=1) # output is called 'output.trees'
reelist[[z]] <- sim.tree
}
plot(reelist[[1]][[1]])
plot(reelist[[1]][[1]], show.tip.label=F)
treelist <- NULL
treelist <- NULL
for (z in 1:length(base.tree)) {
intree <- base.tree[[z]]
sim.tree <- alt.sim.fossil.trees(phy=intree, time.frame=c(10,max(nodeHeights(intree)),0.1),
die=c(0.1,5,0.1), num.taxa=(length(intree$tip.label))*.25, num.trees=1) # output is called 'output.trees'
treelist[[z]] <- sim.tree
}
treelist
class(treelist)
class(treelist) <- "multiPhylo"
plot(treelist, show.tip.label=F)
write.tree(treelist, file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Simulated.PlioPleistocene.Fossil.trees")
class(treelist)
treelist
write.tree(treelist, file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Simulated.PlioPleistocene.Fossil.trees")
treelist[[1]]
treelist[[1]][1]
treelist[[1]][[1]]
trees <- NULL
trees <- NULL
for (i in 1:length(treelist)) {
trees[[i]] <- treelist[[i]][[i]]
}
test <- NULL
for (i in 1:length(treelist)) {
test[[i]] <- treelist[[i]][[i]]
}
test <- list()
for (i in 1:length(treelist)) {
test[[i]] <- treelist[[i]][[i]]
}
write.nexus(treelist, file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Simulated.PlioPleistocene.Fossil.trees")
class(treelist[[1]][[1]])
test <- list()
for (i in 1:length(treelist)) {
test[[i]] <- treelist[[i]][[1]]
}
test
class(test) <- "multiPhylo"
write.tree(test, file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Simulated.PlioPleistocene.Fossil.trees")
input.res <- read.csv(file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Miocene.low.BM.0.01.results.csv")
extinct <- subset(input.res, stree.res$tree.type == "fossil tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
input.res
extinct
input.res
extinct <- subset(input.res, input.res$tree.type == "fossil tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extinct.low.BM <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extinct.low.BM
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extant.low.BM
extant.low.BM <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extant.low.BM
outz
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extant.low.BM <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extant.low.BM
extinct
extinct <- subset(input.res, input.res$tree.type == "fossil tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
outz
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
outz
input.res
extant  <- subset(input.res, input.res$tree.type == "extant tree")
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extant, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extant.low.BM <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extant.low.BM
input.res <- read.csv(file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Miocene.hi.BM.0.1.results.csv")
extinct <- subset(input.res, input.res$tree.type == "fossil tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extinct.hi.BM <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extinct.hi.BM
outz
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extinct.hi.BM <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extinct.hi.BM
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extant, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extant.hi.BM <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extant.hi.BM
input.res <- read.csv(file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Miocene.OU.results.csv")
extinct <- subset(input.res, input.res$tree.type == "fossil tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extinct.OU <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extinct.OU
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extant, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extinct.OU <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
multiplot(fossil.extinct.SRC, extinct.low.BM, extinct.hi.BM, extinct.OU,
fossil.extant.SRC,  extant.low.BM, extant.hi.BM, extant.OU,
cols=2)
extinct <- subset(input.res, input.res$tree.type == "fossil tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extinct.OU <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extant, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extant.OU <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extant.OU
input.res <- read.csv(file="/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Miocene.SRC.results.csv")
extinct <- subset(input.res, input.res$tree.type == "fossil tree")
outz <- summarySE(extinct, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extinct.SRC <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extinct.SRC
extant  <- subset(input.res, input.res$tree.type == "extant tree")
outz <- summarySE(extant, measurevar="weight.w", groupvars="model")
colnames(outz) <- c("model", "N", "w", "sd", "se", "ci")
myplot <- (ggplot(outz, aes(x=model, y=w, fill=model))
+ geom_bar(stat="identity")
+ geom_errorbar(aes(ymin=w-se, ymax=w+se), size=0.3, width=0.2)
+ theme(axis.text.x=element_text(angle=45, hjust=1))
+ scale_fill_manual(values=wes_palette("Royal2", 5, "continuous")))
extant.SRC <- myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
extant.SRC
multiplot(extinct.SRC, extinct.low.BM, extinct.hi.BM, extinct.OU,
extant.SRC,  extant.low.BM, extant.hi.BM, extant.OU,
cols=2)
pp  <- read.tree("/Users/Ian/Google.Drive/ANU Herp Work/Adaptive Radiation/Trait Simulations/Simulated.PlioPleistocene.Fossil.trees")
library(paleotree)
phyloDiv(pp[[1]], int.length=0.1, plotLogRich=T)
phyloDiv(pp[[25]], int.length=0.1, plotLogRich=T)
phyloDiv(pp[[45]], int.length=0.1, plotLogRich=T)
phyloDiv(pp[[65]], int.length=0.1, plotLogRich=T)
phyloDiv(pp[[85]], int.length=0.1, plotLogRich=T)
phyloDiv(drop.extinct(pp[[85]], tol=0.00001), int.length=0.1, plotLogRich=T)
par(mfrow=c(2,1))
phyloDiv(pp[[85]], int.length=0.1, plotLogRich=T)
phyloDiv(drop.extinct(pp[[85]], tol=0.00001), int.length=0.1, plotLogRich=T)
par(mfrow=c(2,1))
phyloDiv(drop.extinct(pp[[85]], tol=0.00001), int.length=0.1, plotLogRich=T)
plot(pp[[85]])
plot(pp[[45]])
plot(pp[[25]])
phyloDiv(pp[[25]], int.length=0.1, plotLogRich=T)
phyloDiv(pp[[26]], int.length=0.1, plotLogRich=T)
library(geiger)
library(PhylogeneticEM)
morph.data <- read.csv("/Users/Ian/Desktop/Limbless.Data.csv", header=T)
all.data <- read.csv("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T222_Elapidae/Elapid_macroevolution/AHE.morpho.csv", header=T)
trim.data <- all.data[,c("Study", "Name_in_tree", "Total_L",
"SVL", "Head_L", "Head_W", "GBD", "Tail_L",
"Genus", "Parity")]
trim.data <- trim.data[complete.cases(trim.data),]
trim.data <- subset(trim.data, trim.data$Study=="AHE")
rownames(trim.data) <- trim.data$Name_in_tree
trans.data <- log(trim.data[3:8])
trans.data[,"Genus"] <- trim.data$Genus
trans.data[,"Parity"] <- trim.data$Parity
trans.data
elap.trees <- read.tree("/Users/Ian/Google.Drive/R.Analyses/ASTRAL/Astral/Elapidae.starBEAST.ASTRAL.242.SCALED.tre")
trees <- read.nexus(trees, file="/Users/Ian/Google.Drive/R.Analyses/Elapidae/Elapidae.ASTRAL.*BEAST.TRIMMED.trees")
all <- trees$tip.label
keep <- trans.data$Name.in.Tree
keep
trans.data
rownames(trans.data)
keep <- rownames(trans.data)
drop <- setdiff(all, keep)
drop
keep
all
name.check(trees[[1]], trans.data)
data <- trans.data
new.tree <- trees[[1]]
morph.data <- t(data) # transpose the data (taxa as columns, traits as rows)
morph.data
all.data <- read.csv("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T222_Elapidae/Elapid_macroevolution/AHE.morpho.csv", header=T)
trim.data <- all.data[,c("Study", "Name_in_tree", "Total_L",
"SVL", "Head_L", "Head_W", "GBD", "Tail_L",
"Genus", "Parity")]
trim.data <- trim.data[complete.cases(trim.data),]
trim.data <- subset(trim.data, trim.data$Study=="AHE")
rownames(trim.data) <- trim.data$Name_in_tree
trans.data <- log(trim.data[3:8])
trans.data
name.check(trees[[1]], trans.data)
data <- trans.data
morph.data <- t(data) # transpose the data (taxa as columns, traits as rows)
morph.data
res<- PhyloEM(phylo=new.tree,
Y_data=morph.data,      # read in the trait data
process="scOU",         # identify the process to analyse
#random.root=T,         #
K_max=30,               # set a maximum limit on the number of shifts to search
check.tips.names=T,     # check to make sure names/trait data match
parallel_alpha=T,       # we want to parallelize the analysis
Ncores=8)               # with how many cores?
data
data <- data[,c(1:2)]
data
res<- PhyloEM(phylo=new.tree,
Y_data=morph.data,      # read in the trait data
process="scOU",         # identify the process to analyse
#random.root=T,         #
K_max=30,               # set a maximum limit on the number of shifts to search
check.tips.names=T,     # check to make sure names/trait data match
parallel_alpha=T,       # we want to parallelize the analysis
Ncores=8)               # with how many cores?
data
data <- data[,1]
data
data <- trans.data
data
data <- data[,c(1)]
data
data <- trans.data
library(phytools)
uncon <- read.tree("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T203_Eulamprus/Constraints/RAxML_bipartitions.FINAL.constrained.bsBEST.tre")
const <- read.tree("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T203_Eulamprus/Constraints/RAxML_bipartitions.Eulamprus.concat.ND4.unconstrained.tre")
cophylo(uncon, const, rotate=T)
test <- cophylo(uncon, const, rotate=T, rotate.multi=T)
plot(test)
plot(test)
ntips(uncon)
length(uncon$tip.label)
length(const$tip.label)
